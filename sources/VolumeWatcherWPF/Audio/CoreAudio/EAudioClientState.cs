using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Audio.CoreAudio
{
    public enum EAudioClientReturnCode:uint
    {
        /*
pub const AUDCLNT_E_NOT_INITIALIZED: ::HRESULT = AUDCLNT_ERR!(0x001);
pub const AUDCLNT_E_ALREADY_INITIALIZED: ::HRESULT = AUDCLNT_ERR!(0x002);
pub const AUDCLNT_E_WRONG_ENDPOINT_TYPE: ::HRESULT = AUDCLNT_ERR!(0x003);
pub const AUDCLNT_E_DEVICE_INVALIDATED: ::HRESULT = AUDCLNT_ERR!(0x004);
pub const AUDCLNT_E_NOT_STOPPED: ::HRESULT = AUDCLNT_ERR!(0x005);
pub const AUDCLNT_E_BUFFER_TOO_LARGE: ::HRESULT = AUDCLNT_ERR!(0x006);
pub const AUDCLNT_E_OUT_OF_ORDER: ::HRESULT = AUDCLNT_ERR!(0x007);
pub const AUDCLNT_E_UNSUPPORTED_FORMAT: ::HRESULT = AUDCLNT_ERR!(0x008);
pub const AUDCLNT_E_INVALID_SIZE: ::HRESULT = AUDCLNT_ERR!(0x009);
pub const AUDCLNT_E_DEVICE_IN_USE: ::HRESULT = AUDCLNT_ERR!(0x00a);
pub const AUDCLNT_E_BUFFER_OPERATION_PENDING: ::HRESULT = AUDCLNT_ERR!(0x00b);
pub const AUDCLNT_E_THREAD_NOT_REGISTERED: ::HRESULT = AUDCLNT_ERR!(0x00c);
pub const AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED: ::HRESULT = AUDCLNT_ERR!(0x00e);
pub const AUDCLNT_E_ENDPOINT_CREATE_FAILED: ::HRESULT = AUDCLNT_ERR!(0x00f);
pub const AUDCLNT_E_SERVICE_NOT_RUNNING: ::HRESULT = AUDCLNT_ERR!(0x010);
pub const AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED: ::HRESULT = AUDCLNT_ERR!(0x011);
pub const AUDCLNT_E_EXCLUSIVE_MODE_ONLY: ::HRESULT = AUDCLNT_ERR!(0x012);
pub const AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL: ::HRESULT = AUDCLNT_ERR!(0x013);
pub const AUDCLNT_E_EVENTHANDLE_NOT_SET: ::HRESULT = AUDCLNT_ERR!(0x014);
pub const AUDCLNT_E_INCORRECT_BUFFER_SIZE: ::HRESULT = AUDCLNT_ERR!(0x015);
pub const AUDCLNT_E_BUFFER_SIZE_ERROR: ::HRESULT = AUDCLNT_ERR!(0x016);
pub const AUDCLNT_E_CPUUSAGE_EXCEEDED: ::HRESULT = AUDCLNT_ERR!(0x017);
pub const AUDCLNT_E_BUFFER_ERROR: ::HRESULT = AUDCLNT_ERR!(0x018);
pub const AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED: ::HRESULT = AUDCLNT_ERR!(0x019);
pub const AUDCLNT_E_INVALID_DEVICE_PERIOD: ::HRESULT = AUDCLNT_ERR!(0x020);
pub const AUDCLNT_E_INVALID_STREAM_FLAG: ::HRESULT = AUDCLNT_ERR!(0x021);
pub const AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE: ::HRESULT = AUDCLNT_ERR!(0x022);
pub const AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES: ::HRESULT = AUDCLNT_ERR!(0x023);
pub const AUDCLNT_E_OFFLOAD_MODE_ONLY: ::HRESULT = AUDCLNT_ERR!(0x024);
pub const AUDCLNT_E_NONOFFLOAD_MODE_ONLY: ::HRESULT = AUDCLNT_ERR!(0x025);
pub const AUDCLNT_E_RESOURCES_INVALIDATED: ::HRESULT = AUDCLNT_ERR!(0x026);
pub const AUDCLNT_E_RAW_MODE_UNSUPPORTED: ::HRESULT = AUDCLNT_ERR!(0x027);
pub const AUDCLNT_S_BUFFER_EMPTY: ::SCODE = AUDCLNT_SUCCESS!(0x001);
pub const AUDCLNT_S_THREAD_ALREADY_REGISTERED: ::SCODE = AUDCLNT_SUCCESS!(0x002);
pub const AUDCLNT_S_POSITION_STALLED: ::SCODE = AUDCLNT_SUCCESS!(0x003);         
         */
        // https://msdn.microsoft.com/ja-jp/library/ee416798(v=vs.85).aspx
        // AUDCLNT_ERR(n) MAKE_HRESULT(SEVERITY_ERROR, FACILITY_AUDCLNT, n)
        // AUDCLNT_SUCCESS(n) MAKE_SCODE(SEVERITY_SUCCESS, FACILITY_AUDCLNT, n)
        SEVERITY_SUCCESS               = 0,
        SEVERITY_ERROR                 = 1,
        FACILITY_AUDCLNT               = 0x889,
        E_NOT_INITIALIZED              = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x001),
        E_ALREADY_INITIALIZED          = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x002),  //HRESULT = AUDCLNT_ERR!(0x002);
        E_WRONG_ENDPOINT_TYPE          = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x003),  //HRESULT = AUDCLNT_ERR!(0x003);
        E_DEVICE_INVALIDATED           = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x004),  //HRESULT = AUDCLNT_ERR!(0x004);
        E_NOT_STOPPED                  = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x005),  //HRESULT = AUDCLNT_ERR!(0x005);
        E_BUFFER_TOO_LARGE             = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x006),  //HRESULT = AUDCLNT_ERR!(0x006);
        E_OUT_OF_ORDER                 = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x007),  //HRESULT = AUDCLNT_ERR!(0x007);
        E_UNSUPPORTED_FORMAT           = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x008),  //HRESULT = AUDCLNT_ERR!(0x008);
        E_INVALID_SIZE                 = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x009),  //HRESULT = AUDCLNT_ERR!(0x009);
        E_DEVICE_IN_USE                = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x00a),  //HRESULT = AUDCLNT_ERR!(0x00a);
        E_BUFFER_OPERATION_PENDING     = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x00b),  //HRESULT = AUDCLNT_ERR!(0x00b);
        E_THREAD_NOT_REGISTERED        = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x00c),  //HRESULT = AUDCLNT_ERR!(0x00c);
        E_NO_SINGLE_PROCESS            = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x00d),
        E_EXCLUSIVE_MODE_NOT_ALLOWED   = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x00e),  //HRESULT = AUDCLNT_ERR!(0x00e);
        E_ENDPOINT_CREATE_FAILED       = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x00f),  //HRESULT = AUDCLNT_ERR!(0x00f);
        E_SERVICE_NOT_RUNNING          = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x010),  //HRESULT = AUDCLNT_ERR!(0x010);
        E_EVENTHANDLE_NOT_EXPECTED     = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x011),  //HRESULT = AUDCLNT_ERR!(0x011);
        E_EXCLUSIVE_MODE_ONLY          = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x012),  //HRESULT = AUDCLNT_ERR!(0x012);
        E_BUFDURATION_PERIOD_NOT_EQUAL = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x013),  //HRESULT = AUDCLNT_ERR!(0x013);
        E_EVENTHANDLE_NOT_SET          = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x014),  //HRESULT = AUDCLNT_ERR!(0x014);
        E_INCORRECT_BUFFER_SIZE        = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x015),  //HRESULT = AUDCLNT_ERR!(0x015);
        E_BUFFER_SIZE_ERROR            = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x016),  //HRESULT = AUDCLNT_ERR!(0x016);
        E_CPUUSAGE_EXCEEDED            = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x017),  //HRESULT = AUDCLNT_ERR!(0x017);
        E_BUFFER_ERROR                 = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x018),  //HRESULT = AUDCLNT_ERR!(0x018);
        E_BUFFER_SIZE_NOT_ALIGNED      = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x019),  //HRESULT = AUDCLNT_ERR!(0x019);
        E_INVALID_DEVICE_PERIOD        = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x020),  //HRESULT = AUDCLNT_ERR!(0x020);
        E_INVALID_STREAM_FLAG          = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x021),  //HRESULT = AUDCLNT_ERR!(0x021);
        E_ENDPOINT_OFFLOAD_NOT_CAPABLE = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x022),  //HRESULT = AUDCLNT_ERR!(0x022);
        E_OUT_OF_OFFLOAD_RESOURCES     = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x023),  //HRESULT = AUDCLNT_ERR!(0x023);
        E_OFFLOAD_MODE_ONLY            = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x024),  //HRESULT = AUDCLNT_ERR!(0x024);
        E_NONOFFLOAD_MODE_ONLY         = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x025),  //HRESULT = AUDCLNT_ERR!(0x025);
        E_RESOURCES_INVALIDATED        = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x026),  //HRESULT = AUDCLNT_ERR!(0x026);
        E_RAW_MODE_UNSUPPORTED         = (SEVERITY_ERROR << 31) | (FACILITY_AUDCLNT << 16) | (0x027),  //HRESULT = AUDCLNT_ERR!(0x027);
        S_BUFFER_EMPTY                 = (SEVERITY_SUCCESS << 31) | (FACILITY_AUDCLNT << 16) | (0x001),  //SCODE = AUDCLNT_SUCCESS!(0x001);
        S_THREAD_ALREADY_REGISTERED    = (SEVERITY_SUCCESS << 31) | (FACILITY_AUDCLNT << 16) | (0x002),  //SCODE = AUDCLNT_SUCCESS!(0x002);
        S_POSITION_STALLED             = (SEVERITY_SUCCESS << 31) | (FACILITY_AUDCLNT << 16) | (0x003),  //SCODE = AUDCLNT_SUCCESS!(0x003);
    }
}
